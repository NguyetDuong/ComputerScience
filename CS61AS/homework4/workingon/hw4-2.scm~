; Exercise 1

; SICP 2.7 - Define upper-bound and lower-bound

(define (add-interval x y)
  (make-interval (+ (lower-bound x) (lower-bound y))
                 (+ (upper-bound x) (upper-bound y))))

(define (mul-interval x y)
  (let ((p1 (* (lower-bound x) (lower-bound y)))
        (p2 (* (lower-bound x) (upper-bound y)))
        (p3 (* (upper-bound x) (lower-bound y)))
        (p4 (* (upper-bound x) (upper-bound y))))
    (make-interval (min p1 p2 p3 p4)
                   (max p1 p2 p3 p4))))

(define (make-interval a b) (cons a b))

(define (upper-bound items)
  (cdr items))
(define (lower-bound items)
  (car items))


; SICP 2.8 - Define sub-interval
(define (sub-interval x y)
  \(make-interval (abs (- (lower-bound x) (lower-bound y)))
		 (abs (- (upper-bound x) (upper-bound y)))))

; SICP 2.10 - Modify div-interval

(define (div-interval x y)
  (mul-interval x 
                (make-interval (/ 1 (upper-bound y))
                               (/ 1 (lower-bound y)))))



; SICP 2.12 - Define make-center-percent and percent

(define (make-center-width c w)
  (make-interval (- c w) (+ c w)))
(define (center i)
  (/ (+ (lower-bound i) (upper-bound i)) 2))
(define (width i)
  (/ (- (upper-bound i) (lower-bound i)) 2))


; SICP 2.17 - Define last-pair
(define (last-pair items)
  (list (list-ref items (- (length items) 1))))

; SICP 2.20 - Define same-parity
(define (same-parity a . b)
	(define (getOdds aList aLength emptyList)
		(if (= aLength 0)
			emptyList
			(if (odd? (car aList))
				(getOdds (cdr aList) (- aLength 1)(append emptyList (list (car aList))))
				(getOdds (cdr aList) (- aLength 1) emptyList)))
	)
	(define (getEvens aList aLength emptyList)
		(if (= aLength 0)
			emptyList
			(if (even? (car aList))
				(getEvens (cdr aList) (- aLength 1)(append emptyList (list (car aList))))
				(getEvens (cdr aList) (- aLength 1) emptyList)))
	)
	
	(if (odd? a)
		(append (list a) (getOdds b (length b) (list)))
		(append (list a) (getEvens b (length b) (list)))
	)
		
		
		
	
 )

    
      


; SICP 2.22 - Write your explanation in the comment block:
#|
Your explanation here
|#


; SICP 2.23 - Define for-each


; Exercise 2 - Define substitute
(define (substitute sentenceList oldWd newWd)
	(define (firstListObject aList) ;; returns the first object in the list
		(car aList)
	)
	(define (changeWords subList newSubList) ;;returns a list of revision sublist
		(if (null? subList) 
			newSubList
			(if (list? subList)
				(if (equal? oldWd (firstListObject subList))
					(changeWords (cdr subList) (append newSubList (list newWd)))
					(changeWords (cdr subList) (append newSubList (list (car subList))))
				)
				(if (equal? (car subList) oldWd)
					newWd
					(car subList)
				)
			)
		)
		
	)
	
	(list (changeWords (car sentenceList) (list)) (changeWords (car (cdr sentenceList)) (list)))


)


; Exercise 3 - Define substitute2
