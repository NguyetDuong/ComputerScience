// This file contains a SUGGESTION for the structure of your program.  You
// may change any of it, or add additional files to this directory (package),
// as long as you conform to the project specification.

// Comments that start with "//" are intended to be removed from your
// solutions.
package jump61;

import java.util.ArrayList;

/** An automated Player.
 *  @author
 */
class AI extends Player {

    /** Time allotted to all but final search depth (milliseconds). */
    private static final long TIME_LIMIT = 15000;

    /** Number of calls to minmax between checks of elapsed time. */
    private static final long TIME_CHECK_INTERVAL = 10000;

    /** Number of milliseconds in one second. */
    private static final double MILLIS = 1000.0;

    /** A new player of GAME initially playing COLOR that chooses
     *  moves automatically.
     */
    AI(Game game, Side color) {
        super(game, color);
    }

    @Override
    void makeMove() {
        // FIXME
    	/*int[] pos = findValidMoves();
    	getGame().makeMove(pos[0], pos[1]);
    	System.out.println(getSide() + " moves " + pos[0] + " " + pos[1]);
    	//System.out.println("I made it into AI");*/
    	//System.out.println(getBoard());
    	
    	
		ArrayList<Integer> empty = new ArrayList<Integer>();
    	MutableBoard c = new MutableBoard(getBoard());
    	minmax(getSide(), c, 4, INF, empty);
    	getGame().makeMove(minmax(getSide(), c, 4, INF, empty));

    	System.out.println(getSide() + " moves " + getBoard().row(minmax(getSide(), c, 4, INF, empty)) + 
    			" " + getBoard().col(minmax(getSide(), c, 4, INF, empty)));
    		
    }
    
    void makeMoveHuman() {
        // FIXME
    	int[] positions = new int[2];
    	if (getGame().getMove(positions)) {
    		getGame().makeMove(positions[0], positions[1]);
    	}
    	
    	System.out.println(getSide() + " moves " + positions[0] + " " + positions[1]);
    }
    
    
    /** This will return the first valid move for this player, on this board.
     * 
     * @return int[] with row being at 0, and col being at 1
     */
    private int[] findValidMoves() {
    	int[] places = new int[2];
    	for (int r = 1; r <= getBoard().size(); r++) {
    		for (int c = 1; c <= getBoard().size(); c++) {
    			//System.out.println("Row " + r + " & Col " + c + " is " + getBoard().isLegal(getSide(), r, c));
    			if (getBoard().isLegal(getSide(), r, c)) {
    				places = new int[] {r, c};
    				return places;
    			}
    		}
    	}
    	return places;
    }

    @Override
    String type() {
    	return "AI";
    }
    
    /** Return the minimum of CUTOFF and the minmax value of board B
     *  (which must be mutable) for player P to a search depth of D
     *  (where D == 0 denotes statically evaluating just the next move).
     *  If MOVES is not null and CUTOFF is not exceeded, set MOVES to
     *  a list of all highest-scoring moves for P; clear it if
     *  non-null and CUTOFF is exceeded. the contents of B are
     *  invariant over this call. 
     *  
     *  Thought process: minmax will return the maximum value at ALL times --
     *  I need to configure this so that it will return the MINIMUM value when it is
     *  my opponent's turn. Can be done with a negative in front?
     *  I get my moves from moves arraylist at the top because I will be adding in
     *  all the steps I took to get to where I went...
     *  
     *  */
    private int minmax(Side p, Board b, int d, int cutoff, ArrayList<Integer> moves) {
    	Side o = p.opposite();
    	int totalSq = b.size() * b.size();
    	if (b.getWinner() == p) {
    		//System.out.println("Does it even go here? -- blueWIN");
    		return INF;
    	} else if (b.getWinner() == o) {
    		//System.out.println("Does it even go here? -- redWIN");
    		return NINF;
    	} else if (d == 0) {
    		return guessBestMove(p, b, cutoff, moves); 
    		// returns the heuristic value for the LAST starting branch
    		// at the same time, it includes us the position/move we need to make
    		// in order to get there
    	} 
    	
    	int bestMoveValue = worstMove(p, b);
    	int bestPosition = -1;
    	// returns the worst possible move VALUE for the side P
    	// from this, we know it is the "least" value, and as a result, we should always
    	// be able to find better values.
    	
    	for (int n = 0; n < totalSq; n++) {
    		//for each LEGAL move for p
    		if (b.isLegal(p, n)) {
    			b.addSpot(p, n); // add the spot to the board -- now this is an UPDATED board
    			 // you want to add the step you take to get to this point
    						 // seeing how in the end, we want to be able to retrace to the best
    						// possible output
    			
    			// now we try to get the "highest" opponent value
    			// technically when we use it, it has to be negative since 
    			// our opponent will pick the best outcome for themselves == worst 
    			// outcome for the AI
    			
    			int opponent = minmax(o, b, d-1, -bestMoveValue, moves);
    			//System.out.println(-opponent + " versus " + bestMoveValue);
    			
    			if (-opponent > bestMoveValue) {
    				//System.out.println("Entered!");
    				bestPosition = n;
    				bestMoveValue = -opponent;
    				if (bestMoveValue >= cutoff) {
    					b.undo();
    					break;
    				}
    			}
    			
    			moves.add(bestPosition);
    			b.undo();
    			//moves.add(n);
    		}
    	}
    	//System.out.println("Best " + bestPosition);
    	return bestPosition;
    }
    /** This will return the highest heuristic value, given
     *  the side p and board b. On top of that, it will revise the 
     *  ArrayList moves given to it so that the ArrayList now contains
     *  the moves taken to get there.
     * @param p
     * @param b
     * @param moves
     * @return highest heuristic value given the Side p and Board b
     */
    private int guessBestMove(Side p, Board b, int cutoff, ArrayList<Integer> moves) {
    	int bestCase = NINF; // beginning at - infinity because we know everything will be more
    	int bestPosition = -1;
    	int totalSq = b.size() * b.size();
    	for (int n = 0; n < totalSq; n++) {
    		if (b.isLegal(p, n)) {
    			b.addSpot(p, n);
    			int currentCase = staticEval(p, b);
    			if (currentCase > bestCase) {
    				bestCase = currentCase;
    				bestPosition = n;
    				if (bestCase >= cutoff) {
    					b.undo();
    					break;
    				}
    			}
    			b.undo();
    		}
    	}
    	return bestPosition;
    }
    
    /** Given a board and the side we're calculating the worstMove for,
     *  we look through every single possible move, then return the move
     *  that gives the LEAST amount of staticEval -- points
     * @param p
     * @param b
     * @return the least heuristic value for board b and player p
     */
    private int worstMove(Side p, Board b) {
    	int totalSq = b.size() * b.size();
    	int worstCase = INF; // beginning worstCase is infinity BECAUSE we know everything will be less
    	for (int n = 0; n < totalSq; n++) {
    		if (b.isLegal(p, n)) {
    			b.addSpot(p, n);
    			if (worstCase > staticEval(p, b)) {
    				worstCase = staticEval(p, b);
    			}
    			b.undo();
    		}
    	}
    	return worstCase;
    }

    /** Returns heuristic value of board B for player P.
     *  Higher is better for P.
     *  Essentially return the number of P squares - number of opp(P) squares. */
    private int staticEval(Side p, Board b) {
        // REPLACE WITH SOLUTION
    	Side opp = p.opposite();
    	int mySide = 0;
    	int oppSide = 0;
    	for (int r = 1; r <= b.size(); r++) {
    		for (int c = 1; c <= b.size(); c++) {
    			if (b.get(r, c).getSide() == p) {
    				mySide++;
    			} else if (b.get(r, c).getSide() == opp) {
    				oppSide++;
    			}
    		}
    	}
    	
        return mySide - oppSide;
    }
    

    private static final int INF = 10000000;//Integer.MAX_VALUE;
    private static final int NINF = -10000000;//Integer.MIN_VALUE;

}
