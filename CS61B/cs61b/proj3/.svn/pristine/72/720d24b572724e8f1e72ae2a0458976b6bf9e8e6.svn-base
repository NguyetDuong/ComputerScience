package graph;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;

import org.junit.Test;

import static org.junit.Assert.*;

/** Unit tests for the Graph class.
 *  @author Nguyet Duong
 */
public class ForcePathsTesting {
    
	public class SSP extends SimpleShortestPaths {

		public SSP(LabeledGraph<Integer, Double> G, int source, int dest) {
			super(G, source, dest);
			_g = G;
			didVisit = new HashMap<Integer, Integer>();
		}

		@Override
		protected double getWeight(int u, int v) {
			if (!_g.contains(v) || !_g.contains(u) || !_g.contains(u, v)) {
				return Integer.MAX_VALUE;
			}
			return _g.getLabel(u, v); // does not need to be implemented
		}
		
		@Override
		protected double estimatedDistance(int v) {
			if (getPredecessor(v) == 0) {
				return 0.0;
			} else if (v == 7) {
				//gotVisit = true;
			}
			int x = getPredecessor(v);
			didVisit.put(v, (int) getWeight(x, v));
			gotVisit = true;
			return didVisit.get(v);
		}
		
		protected boolean hasBeenVisited(int v) {
			return didVisit.containsKey(v);
		}
		
		private LabeledGraph<Integer, Double> _g;
		private HashMap<Integer, Integer> didVisit;
		Boolean gotVisit = false;
		
	}
    
    @Test
    public void ShortestPathTest() {
    	DirectedGraph g = new DirectedGraph();
    	LabeledGraph<Integer, Double> stickers = new LabeledGraph<Integer, Double>(g);
    	SSP turn = new SSP(stickers, 1, 6);
    	/** I will force add into the turn ShortestPaths now
    	 *  and hopefully things work.
    	 */
    	HashMap<Integer, Integer> fix = new HashMap<Integer, Integer>();
    	fix.put(1, 4);
    	fix.put(4, 3);
    	fix.put(3, 6);
    	turn.forceMovements(fix);
    	List<Integer> correct = Arrays.asList(1, 4, 3, 6);
    	assertEquals(correct, turn.pathTo());
    }
    
    @Test
    public void verySimplePathTest() {
    	DirectedGraph g = new DirectedGraph();
    	LabeledGraph<Integer, Double> stickers = new LabeledGraph<Integer, Double>(g);
    	SSP turn = new SSP(stickers, 5, 2);
    	stickers.add();
    	stickers.add();
    	stickers.add();
    	stickers.add();
    	stickers.add();
    	stickers.add(5, 3, 12.0);
    	stickers.add(3, 2, 3.0);
    	stickers.add(5, 4, 7.0);
    	stickers.add(4, 1, 8.0);
    	turn.setPaths();
    	List<Integer> correct = Arrays.asList(5, 3, 2);
    	assertEquals(correct, turn.pathTo());
    }
    
}
