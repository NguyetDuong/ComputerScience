package graph;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.Set;

/* See restrictions in Graph.java. */

/** A partial implementation of Graph containing elements common to
 *  directed and undirected graphs.
 *
 *  @author Nguyet Duong
 */
abstract class GraphObj extends Graph {

    /** A new, empty Graph. */
    GraphObj() {
        successors = new HashMap<Integer, ArrayList<Integer>>();
        predecessors = new HashMap<Integer, ArrayList<Integer>>();
        undirectedHelp = new HashMap<Integer, ArrayList<Integer>>();
    }

    @Override
    public int vertexSize() {
        return successors.size();
    }

    @Override
    public int maxVertex() {
        int max = 0;
        Set<Integer> keys = successors.keySet();
        Iterator<Integer> k = keys.iterator();
        while (k.hasNext()) {
            int check = k.next();
            if (check > max) {
                max = check;
            }
        }

        return max;
    }

    @Override
    public int edgeSize() {
        if (!isDirected()) {
            int num = 0;
            Set<Integer> keys = undirectedHelp.keySet();
            Iterator<Integer> k = keys.iterator();
            while (k.hasNext()) {
                num += undirectedHelp.get(k.next()).size();
            }
            return num;
        }
        int num = 0;
        Set<Integer> keys = successors.keySet();
        Iterator<Integer> k = keys.iterator();
        while (k.hasNext()) {
            num += successors.get(k.next()).size();
        }
        
        return num;
    }

    @Override
    public abstract boolean isDirected();

    @Override
    public int outDegree(int v) {
        if (!successors.containsKey((Integer) v)) {
            return 0;
        }
        return successors.get((Integer) v).size();
    }

    @Override
    public abstract int inDegree(int v);

    @Override
    public boolean contains(int u) {
        return successors.containsKey((Integer) u);
    }

    @Override
    public boolean contains(int u, int v) {
        if (successors.containsKey((Integer) u)) {
            return successors.get((Integer) u).contains(v);
        } else {
            return false;
        }
        
    }

    @Override
    public int add() {
        if (successors.size() == 0) {
            successors.put(1, new ArrayList<Integer>());
            predecessors.put(1, new ArrayList<Integer>());
            undirectedHelp.put(1, new ArrayList<Integer>());
            return 1;
        } else {
            int addIn = 1;
            while (true) {
                if (!successors.containsKey((Integer) addIn)) {
                    successors.put(addIn, new ArrayList<Integer>());
                    predecessors.put(addIn, new ArrayList<Integer>());
                    undirectedHelp.put(addIn, new ArrayList<Integer>());
                    break;
                } else {
                    addIn++;
                }
            }
            return addIn;
        }
        
    }

    @Override
    public int add(int u, int v) {
        if (isDirected()) {
            if (!contains(u, v)) {
                successors.get((Integer) u).add(v);
                predecessors.get((Integer) v).add(u);
            }
        } else {
            if (u == v) {
                successors.get((Integer) u).add(v);
                predecessors.get((Integer) v).add(u);
                undirectedHelp.get((Integer) u).add(v);
            } else if (!contains(u, v)) {
                successors.get((Integer) u).add(v);
                predecessors.get((Integer) v).add(u);
                if (u < v) {
                    undirectedHelp.get((Integer) u).add(v);
                } else {
                    undirectedHelp.get((Integer) v).add(u);
                }

                if (!contains(v, u)) {
                    successors.get((Integer) v).add(u);
                    predecessors.get((Integer) u).add(v);
                }
            }
        }

        return u;
    }

    @Override
    public void remove(int v) {
        successors.remove((Integer) v);
        predecessors.remove((Integer) v);
        for (Integer key : successors.keySet()) {
            if (successors.get(key).contains(v)) {
                successors.get(key).remove((Integer) v);
            }
            if (predecessors.get(key).contains(v)) {
                predecessors.get(key).remove((Integer) v);
            }
        }

        if (!isDirected()) {
            undirectedHelp.remove((Integer) v);
            Iterator<Integer> cc = undirectedHelp.keySet().iterator();
            while (cc.hasNext()) {
                int item = cc.next();
                undirectedHelp.get((Integer) item).remove((Integer) v);
            }
        }
    }

    @Override
    public void remove(int u, int v) {
        if (successors.containsKey((Integer) u)) {
            ArrayList<Integer> vals = successors.get((Integer) u);
            vals.remove((Integer) v);
            successors.put(u, vals);
            if (predecessors.containsKey(v)) {
                ArrayList<Integer> pVals = predecessors.get((Integer) v);
                pVals.remove((Integer) u);
                predecessors.put(v, pVals);
            }
        }
    }

    @Override
    public Iteration<Integer> vertices() {
        return new Iterate<Integer>(successors.keySet().iterator());
    }

	@Override
	public int successor(int v, int k) {
		if (successors.containsKey((Integer) v) && k < successors.get(v).size()) {
			return successors.get((Integer) v).get(k);
		}
		return 0;
	}

	@Override
	public abstract int predecessor(int v, int k);

	@Override
	public Iteration<Integer> successors(int v) {
		if (!successors.containsKey(v)) {
			return new Iterate<Integer>(new ArrayList<Integer>().iterator());
		}
		return new Iterate<Integer>(successors.get((Integer) v).iterator());
	}

	@Override
	public abstract Iteration<Integer> predecessors(int v);

	@Override
	public Iteration<int[]> edges() {
		ArrayList<int[]> e = new ArrayList<int[]>();
		if (isDirected()) {
			Set<Integer> pKeys = predecessors.keySet();
			Iterator<Integer> pk = pKeys.iterator();
			while (pk.hasNext()) {
				int item = pk.next();
				for (int i = 0; i < successors.get((Integer) item).size(); i++) {
					int[] inp = new int[2];
                    inp[1] = successors.get((Integer) item).get(i);
                    inp[0] = item;
                    e.add(inp);
                }
            }
        } else {
            Set<Integer> keys = successors.keySet();
            Iterator<Integer> k = keys.iterator();
            while (k.hasNext()) {
                int key = k.next();
                for (int i = 0; i < successors.get(key).size(); i++) {
                    if (contains(key, successors.get(key).get(i))
                            && contains(successors.get(key).get(i))
                            && key <= successors.get(key).get(i)) {
                        int[] x = new int[] {key, successors.get(key).get(i)};
                        e.add(x);
                    }
                }
            }
        }
        return new Iterate<int[]>(e.iterator());
    }

    @Override
    protected boolean mine(int v) {
        return successors.containsKey((Integer) v);
    }

    @Override
    protected void checkMyVertex(int v) {
        if (!contains(v)) {
            throw new IllegalArgumentException();
        }
    }

	@Override
	protected int edgeId(int u, int v) {
		if (successors.containsKey((Integer) u)
				&& successors.get((Integer) u).contains((Integer) v)
				&& isDirected()) {
			return (u + v) * (u + v + 1) / 2 + v;
		} else if (!isDirected()) {
			return u ^ 2 + v ^ 2;
		} else {
            return 0;
        }
    }

    /** Returns the map of successors. */
    public HashMap<Integer, ArrayList<Integer>> getSuccessors() {
        return successors;
    }

    /** Returns the map of predecessors. */
    public HashMap<Integer, ArrayList<Integer>> getPredecessors() {
        return predecessors;
    }

    /** This holds all of the successors to a certain key. */
    private HashMap<Integer, ArrayList<Integer>> successors;
    /** This holds all of the predecessors to a certain key. */
    private HashMap<Integer, ArrayList<Integer>> predecessors;
    /** This is our map for when the graph is undirected. */
    private HashMap<Integer, ArrayList<Integer>> undirectedHelp;
}
