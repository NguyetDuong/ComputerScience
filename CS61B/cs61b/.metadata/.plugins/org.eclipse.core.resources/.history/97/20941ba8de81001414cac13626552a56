package graph;

/* See restrictions in Graph.java. */

import java.util.ArrayList;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.PriorityQueue;

/** The shortest paths through an edge-weighted graph.
 *  By overrriding methods getWeight, setWeight, getPredecessor, and
 *  setPredecessor, the client can determine how to represent the weighting
 *  and the search results.  By overriding estimatedDistance, clients
 *  can search for paths to specific destinations using A* search.
 *  @author
 */
public abstract class ShortestPaths {

    /** The shortest paths in G from SOURCE. */
    public ShortestPaths(Graph G, int source) {
        this(G, source, 0);
        
    }

    /** A shortest path in G from SOURCE to DEST. */
    public ShortestPaths(Graph G, int source, int dest) {
        _G = G;
        _source = source;
        _dest = dest;
        _movements = new HashMap<Integer, Integer>();
        _weights = new HashMap<Integer, Double>();
        // FIXME
    }

    /** Initialize the shortest paths.  Must be called before using
     *  getWeight, getPredecessor, and pathTo. */
    public void setPaths() {
    	setWeight(_source, 0.0);
    	Comparator<Integer> leastLength = new ShortestComparator<Integer>();
    	PriorityQueue<Integer> help = new PriorityQueue<Integer>(11, leastLength);
    	Iteration<Integer> vertices = _G.vertices();
    	for (Integer v : vertices) {
    		if (v != _source) {
    			setWeight(v, Double.MAX_VALUE);
    			setPredecessor(v, 0);
    		}
    		help.add(v);
    	}
    	
    	while (!help.isEmpty()) {
    		int vertex = help.remove();
    		if (vertex != getDest()) {
    			Iteration<Integer> successors = _G.successors(vertex);
    			for (Integer s : successors) {
    				Double num = getWeight(vertex) + getWeight(vertex, s);
    				if (num < getWeight(s)) {
    					help.remove(s);
    					setWeight(s, num);
    					setPredecessor(s, vertex);
    					help.add(s);
    				}
    			}
    		} else if (vertex == getDest()) {
    			break;
    		}
    		help.remove();
    	}
        // FIXME -- FIXED?
    }
    
    public class ShortestComparator<G> implements Comparator<G> {

		@Override
		public int compare(G o1, G o2) {
			Double o1Compare = getWeight((Integer) o1) + estimatedDistance((Integer) o1);
			Double o2Compare = getWeight((Integer) o2) + estimatedDistance((Integer) o2);
			if (o1Compare > o2Compare) {
				return 1;
			} else if (o1Compare < o2Compare) {
				return -1;
			} else {
				return 0;
			}
		}
    	
    }

    /** Returns the starting vertex. */
    public int getSource() {
        // FIXME
        return _source;
    }

    /** Returns the target vertex, or 0 if there is none. */
    public int getDest() {
        // FIXME -- FIXED
        return _dest;
    }

    /** Returns the current weight of vertex V in the graph.  If V is
     *  not in the graph, returns positive infinity. */
    public abstract double getWeight(int v);

    /** Set getWeight(V) to W. Assumes V is in the graph. */
    protected abstract void setWeight(int v, double w);

    /** Returns the current predecessor vertex of vertex V in the graph, or 0 if
     *  V is not in the graph or has no predecessor. */
    public abstract int getPredecessor(int v);

    /** Set getPredecessor(V) to U. */
    protected abstract void setPredecessor(int v, int u);

    /** Returns an estimated heuristic weight of the shortest path from vertex
     *  V to the destination vertex (if any).  This is assumed to be less
     *  than the actual weight, and is 0 by default. */
    protected double estimatedDistance(int v) {
        return 0.0;
    }
 
    /** Returns the current weight of edge (U, V) in the graph.  If (U, V) is
     *  not in the graph, returns positive infinity. */
    protected abstract double getWeight(int u, int v);

    /** Returns a list of vertices starting at _source and ending
     *  at V that represents a shortest path to V.  Invalid if there is a
     *  destination vertex other than V. */
    public List<Integer> pathTo(int v) {
        // FIXME -- Fixed
    	
    	ArrayList<Integer> path = new ArrayList<Integer>();
    	int pos = v;
    	while (true) {
    		path.add(pos);
    		pos = getPredecessor(pos);
    		if (pos == getSource()) {
    			path.add(pos);
    			Collections.reverse(path);
    			return path;
    		}
    	}
    	
    }
    
    public Graph getGraph() {
    	return _G;
    }
    
    public HashMap<Integer, Integer> getMoves() {
    	return _movements;
    }


    /** Returns a list of vertices starting at the source and ending at the
     *  destination vertex. Invalid if the destination is not specified. */
    public List<Integer> pathTo() {
        return pathTo(getDest());
    }
    
    /** This is used to see if my pathTo() works.
     *  Essentially I hard fix the _movements to the correct version
     *  I want so that I do not have to code setPaths() yet.
     * @param m
     */
    public void forceMovements(HashMap<Integer, Integer> m) {
    	_movements = m;
    }

    // FIXME

    /** The graph being searched. */
    protected final Graph _G;
    /** The starting vertex. */
    private final int _source;
    /** The target vertex. */
    private final int _dest;
    // FIXME
    
    /** This HashMap represents the actual movements we'll be taking
     *  as in we will be replacing it IFF we find something better.
     *  The first item T2 is the predecessor of T1.
     */
    private HashMap<Integer, Integer> _movements;
    /** This represents the weight of each edge where the edgeId is the
     *  identification for the edge. 
     */
    private HashMap<Integer, Double> _weights;
    /** This will be our queue to which we will be searching and looking through
     *  stuff to make sure that what we get out of it is what we need.
     *  We will save the positions every time something is visited in this specific
     *  Traverse implementation/extension. And therefore we can have a list
     *  of where we should go.
     */

}