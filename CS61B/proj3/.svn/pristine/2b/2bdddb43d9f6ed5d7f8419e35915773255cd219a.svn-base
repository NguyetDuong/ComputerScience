package graph;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.junit.Test;

import static org.junit.Assert.*;

/** Unit tests for the Graph class.
 *  @author
 */
public class GraphTesting {

    // Add tests.  Here's a sample.

    @Test
    public void emptyGraph() {
        DirectedGraph g = new DirectedGraph();
        assertEquals("Initial graph has vertices", 0, g.vertexSize());
        assertEquals("Initial graph has edges", 0, g.edgeSize());
    }
    
    @Test
    public void addMethodAndContainsTest() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	assertEquals(4, g.vertexSize());
    	assertEquals(true, g.contains(1));
    	assertEquals(false, g.contains(5));
    	assertEquals(true, g.contains(2));
    	assertEquals(true, g.contains(3));
    	assertEquals(true, g.contains(4));
    }
    
    @Test
    public void addTwoAndContainsTwoTest() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add(1, 3);
    	g.add(3, 4);
    	g.add(2, 3);
    	g.add(3, 1);
    	g.add(3, 1);
    	assertEquals(true, g.contains(1, 3));
    	assertEquals(true, g.contains(2, 3));
    	assertEquals(true, g.contains(3, 1));
    	assertEquals(true, g.contains(3, 4));
    	assertEquals(false, g.contains(5, 7));
    	assertEquals(false, g.contains(4, 3));
    	assertEquals(false, g.contains(3, 2));
    	assertEquals(4, g.edgeSize());
    }
    
    @Test
    public void removeTest() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add(1, 3);
    	g.add(3, 4);
    	g.add(2, 3);
    	g.add(3, 1);
    	g.add(1, 2);
    	g.add(4, 1);
    	g.add(3, 1);
    	assertEquals(5, g.maxVertex());
    	assertEquals(5, g.vertexSize());
    	assertEquals(6, g.edgeSize());
    	g.remove(3);
    	assertEquals(5, g.maxVertex());
    	assertEquals(false, g.contains(3));
    	assertEquals(4, g.vertexSize());
    	assertEquals(2, g.edgeSize());
    	assertEquals(false, g.contains(1, 3));
    	assertEquals(false, g.contains(3, 1));
    	assertEquals(false, g.contains(3, 4));
    	assertEquals(true, g.contains(1, 2));
    	assertEquals(true, g.contains(4, 1));
    	g.add();
    	assertEquals(true, g.contains(3));
    	assertEquals(false, g.contains(3, 1));
    	assertEquals(false, g.contains(1, 3));
    }
    
    @Test
    public void outDegreeTest() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add(1, 3);
    	g.add(3, 4);
    	g.add(2, 3);
    	g.add(3, 1);
    	g.add(1, 2);
    	g.add(4, 1);
    	g.add(3, 1);
    	assertEquals(2, g.outDegree(3));
    	assertEquals(0, g.outDegree(42));
    	assertEquals(2, g.outDegree(1));
    	assertEquals(1, g.outDegree(4));
    }
    
    @Test
    public void successorTest() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add(1, 3);
    	g.add(3, 2);
    	g.add(2, 1);
    	g.add(2, 3);
    	assertEquals(3, g.successor(2, 1));
    	g.remove(2, 1);
    	assertEquals(3, g.successor(2, 0));
    }
    
    @Test
    public void idTest() {
    	DirectedGraph g = new DirectedGraph();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add(1, 3);
    	g.add(3, 2);
    	g.add(2, 1);
    	g.add(2, 3);
    	assertEquals(false, (g.edgeId(3, 2) == g.edgeId(2, 3)));
    	assertEquals(0, g.edgeId(1, 4));
    }
    
    @Test
    public void verticesTest() {
    	DirectedGraph g = new DirectedGraph();
    	assertEquals(false, g.vertices().hasNext());
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.remove(2);
    	ArrayList<Integer> out = new ArrayList<Integer>();
    	for (int i : g.vertices()) {
    		out.add(i);
    	}
    	List<Integer> correct = Arrays.asList(1, 3, 4);
    	assertEquals(correct, out);
    }
    
    @Test
    public void successorsTest() {
    	DirectedGraph g = new DirectedGraph();
    	assertEquals(false, g.vertices().hasNext());
    	g.add();
    	g.add();
    	g.add();
    	g.add();
    	g.add(3, 2);
    	g.add(3, 1);
    	g.add(3, 4);
    	ArrayList<Integer> out = new ArrayList<Integer>();
    	for (int i : g.successors(3)) {
    		out.add(i);
    	}
    	List<Integer> correct = Arrays.asList(2, 1, 4);
    	assertEquals(correct, out);
    }

}
