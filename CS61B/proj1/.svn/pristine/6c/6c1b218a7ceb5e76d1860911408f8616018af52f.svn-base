package db61b;

import java.io.BufferedReader;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.io.PrintStream;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Iterator;
import java.util.List;

import static db61b.Utils.*;

/** A single table in a database.
 *  @author P. N. Hilfinger
 */
class Table implements Iterable<Row> {
    /** A new Table whose columns are given by COLUMNTITLES, which may
     *  not contain dupliace names.
     *  DONE */
    Table(String[] columnTitles) {
        for (int i = columnTitles.length - 1; i >= 1; i -= 1) {
            for (int j = i - 1; j >= 0; j -= 1) {
                if (columnTitles[i].equals(columnTitles[j])) {
                    throw error("duplicate column name: %s",
                                columnTitles[i]);
                }
            }
        }

        Row titleRow = new Row(columnTitles);
        _title = titleRow;
        _rows.add(titleRow);
    }

    /** A new Table whose columns are give by COLUMNTITLES. */
    Table(List<String> columnTitles) {
        this(columnTitles.toArray(new String[columnTitles.size()]));
    }

    /** Return the number of columns in this table.
     *  DONE */
    public int columns() {
        return _title.size();
    }

    /** Return the title of the Kth column.  Requires 0 <= K < columns().
     *  DONE */
    public String getTitle(int k) {
        return _title.get(k);
    }

    /** Return the number of the column whose title is TITLE, or -1 if
     *  there isn't one. It starts where the first column is 0.
     *  DONE */
    public int findColumn(String title) {
        for (int i = 0; i < _title.size(); i++) {
            if (title.equals(_title.get(i))) {
                return i;
            }
        }
        return -1;
    }

    /** Return the number of Rows in this table.
     *  DONE */
    public int size() {
        int colNum = 0;
        Iterator<Row> count = this.iterator();
        while (count.hasNext()) {
            colNum++;
            count.next();
        }
        return colNum - 1;
    }

    /** Returns an iterator that returns my rows in an unspecfied order. */
    @Override
    public Iterator<Row> iterator() {
        return _rows.iterator();
    }

    /** Add ROW to THIS if no equal row already exists.  Return true if anything
     *  was added, false otherwise.
     *  DONE */
    public boolean add(Row row) {
        if (!_rows.contains(row)) {
            _rows.add(row);
            return true;
        } else {
            return false;
        }
    }

    /** Read the contents of the file NAME.db, and return as a Table.
     *  Format errors in the .db file cause a DBException.
     *  DONE */
    static Table readTable(String name) {
        BufferedReader input;
        Table table;
        input = null;
        table = null;
        try {
            input = new BufferedReader(new FileReader(name + ".db"));
            String header = input.readLine();
            if (header == null) {
                throw error("missing header in DB file");
            }
            String[] columnNames = header.split(",");
            table = new Table(columnNames);
            while (input.ready()) {
                String newRow = input.readLine();
                String[] toPutInRow = newRow.split(",");
                Row addingIn = new Row(toPutInRow);
                table.add(addingIn);
            }
        } catch (FileNotFoundException e) {
            throw error("could not find %s.db", name);
        } catch (IOException e) {
            throw error("problem reading from %s.db", name);
        } finally {
            if (input != null) {
                try {
                    input.close();
                } catch (IOException e) {
                    /* Ignore IOException */
                }
            }
        }
        return table;
    }

    /** Write the contents of TABLE into the file NAME.db. Any I/O errors
     *  cause a DBException.
     *  DONE */
    void writeTable(String name) {
        PrintStream output;
        output = null;
        try {
            String sep;
            sep = "";
            output = new PrintStream(name + ".db");
            Iterator<Row> helper = this.iterator();
            while (helper.hasNext()) {
                Row toPut = helper.next();
                for (int i = 0; i < toPut.size(); i++) {
                    sep = toPut.get(i);
                    for (int a = 0; a < sep.length(); a++) {
                        output.append(sep.charAt(a));
                    }
                    if (i != toPut.size() - 1) {
                        output.append(",");
                    }
                }
                output.append("\n");
            }
        } catch (IOException e) {
            throw error("trouble writing to %s.db", name);
        } finally {
            if (output != null) {
                output.close();
            }
        }
    }

    /** Print my contents on the standard output.
     *  DONE */
    void print() {
        HashSet<Row> revise = _rows;
        revise.remove(_title);
        Iterator<Row> everything = revise.iterator();
        while (everything.hasNext()) {
            Row a = everything.next();
            System.out.print(" ");
            for (int i = 0; i < a.size(); i++) {
                System.out.print(a.get(i) + " ");
            }
            System.out.println("");
        }
    }

    /** Return a new Table whose columns are COLUMNNAMES, selected from
     *  rows of this table that satisfy CONDITIONS.
     *  DONE */
    Table select(List<String> columnNames, List<Condition> conditions) {
        Table result = new Table(columnNames);
        ArrayList<Column> cols = new ArrayList<Column>();
        for (int i = 0; i < columnNames.size(); i++) {
            cols.add(new Column(columnNames.get(i), this));
        }

        if (conditions.isEmpty()) {
            HashSet<Row> revised = _rows;
            revised.remove(_title);
            Iterator<Row> searchThrough = revised.iterator();
            while (searchThrough.hasNext()) {
                Row input = new Row(cols, searchThrough.next());
                result.add(input);
            }

        } else {
            HashSet<Row> revised = _rows;
            revised.remove(_title);
            Iterator<Row> searchThrough = revised.iterator();
            while (searchThrough.hasNext()) {
                Row toChange = searchThrough.next();
                ArrayList<Boolean> anyFalse = new ArrayList<Boolean>();
                for (int i = 0; i < conditions.size(); i++) {
                    Condition a = conditions.get(i);
                    anyFalse.add(a.getConditionalRow(toChange, _title));
                }
                if (!anyFalse.contains(false)) {
                    Row input = new Row(cols, toChange);
                    result.add(input);
                }
            }
        }
        return result;
    }

    /** Return a new Table whose columns are COLUMNNAMES, selected
     *  from pairs of rows from this table and from TABLE2 that match
     *  on all columns with identical names and satisfy CONDITIONS.
     *
     *  To my reader: I deeply appologize for the mess. */
    Table select(Table table2, List<String> columnNames,
                List<Condition> conditions) {
        Table result = new Table(columnNames);
        ArrayList<Row> titles = new ArrayList<Row>();
        titles.add(this.titleRow());
        titles.add(table2.titleRow());
        HashSet<Row> revised = _rows;
        revised.remove(_title);
        Iterator<Row> tableOne = revised.iterator();
        int[] matchingColNums = containsMatchingCol(titles);
        ArrayList<Row> table1 = new ArrayList<Row>();
        while (tableOne.hasNext()) {
            table1.add(tableOne.next());
        }
        if (conditions.isEmpty()) {
            Row nameTitle = mergeRow(titles.get(0), titles.get(1));
            ArrayList<String> namesTitle = new ArrayList<String>();
            for (int i = 0; i < nameTitle.size(); i++) {
                namesTitle.add(nameTitle.get(i));
            }
            Table revison = new Table(namesTitle);
            if (matchingColNums[0] != -1 && matchingColNums[1] != -1) {
                for (int t1 = 0; t1 < table1.size(); t1++) {
                    Row one = table1.get(t1);
                    ArrayList<Row> tableTwo = new ArrayList<Row>();
                    Row tableTwoTitles = table2.titleRow();
                    Iterator<Row> items = table2.iterator();
                    while (items.hasNext()) {
                        Row two = items.next();
                        String c1 = one.get(matchingColNums[0]);
                        if (c1.equals(two.get(matchingColNums[1]))) {
                            revison.add(mergeRow(one, two));
                        }
                    }
                }
                result = revison.select(columnNames, conditions);
            } else {
                for (int t1 = 0, pos = 0; t1 < table1.size(); t1++) {
                    String[] revisedRows =
                        new String[columnNames.size()];
                    Row one = table1.get(t1);
                    ArrayList<Row> tableTwo = new ArrayList<Row>();
                    Row tableTwoTitles = table2.titleRow();
                    Iterator<Row> items = table2.iterator();
                    while (items.hasNext()) {
                        Row a = items.next();
                        if (!a.equals(tableTwoTitles)) {
                            tableTwo.add(a);
                        }
                    }
                    for (int i = 0; i < columnNames.size(); i++) {
                        if (this.findColumn(columnNames.get(i)) != -1) {
                            revisedRows[i] =
                                one.get(this.findColumn(columnNames.get(i)));
                        } else {
                            Row two = tableTwo.get(pos);
                            String x = columnNames.get(i);
                            int columnPlace = table2.findColumn(x);
                            revisedRows[i] =
                                two.get(columnPlace);
                        }
                    }
                    if (pos < tableTwo.size() - 1) {
                        pos++;
                        t1--;
                    } else {
                        pos = 0;
                    }
                    result.add(new Row(revisedRows));
                }
            }

        } else {
            if (matchingColNums[0] != -1 && matchingColNums[1] != -1) {
                Row columnTitle = mergeRow(this.titleRow(), table2.titleRow());
                ArrayList<String> allTitles = new ArrayList<String>();
                for (int a = 0; a < columnTitle.size(); a++) {
                    allTitles.add(columnTitle.get(a));
                }
                Table revison = new Table(allTitles);
                for (int t1 = 0; t1 < table1.size(); t1++) {
                    Iterator<Row> comparison = table2.iterator();
                    Row one = table1.get(t1);
                    String a = one.get(matchingColNums[0]);
                    while (comparison.hasNext()) {
                        Row two = comparison.next();
                        String b = two.get(matchingColNums[1]);
                        if (b.equals(a)) {
                            revison.add(mergeRow(one, two));
                        }

                    }
                }
                result = revison.select(columnNames, conditions);

            } else {
                ArrayList<Condition> con = new ArrayList<Condition>();
                Table revison = this.select(table2, columnNames, con);
                result = revison.select(columnNames, conditions);
            }
        }
        return result;
    }

    /** Returns an array of ints with the first Row's
     *  position where the matching column is and the
     *  second Row's position.
     *  @param  titles */
    int[] containsMatchingCol(ArrayList<Row> titles) {
        Row a = titles.get(0);
        Row b = titles.get(1);
        int[] pos = new int[2];
        for (int i = 0; i < a.size(); i++) {
            for (int j = 0; j < b.size(); j++) {
                String x = a.get(i);
                String y = b.get(j);
                if (x.equals(y)) {
                    pos[0] = i;
                    pos[1] = j;
                    return pos;
                }
            }
        }
        pos[0] = -1;
        pos[1] = -1;

        return pos;
    }

    /** This will return a Row from
     *  two given Row that is given.
     *  @param  a
     *  @param  b */
    Row mergeRow(Row a, Row b) {
        ArrayList<String> replace = new ArrayList<String>();
        for (int i = 0; i < a.size(); i++) {
            replace.add(a.get(i));
        }
        for (int j = 0; j < b.size(); j++) {
            if (!replace.contains(b.get(j))) {
                replace.add(b.get(j));
            }
        }

        return new Row(replace.toArray(new String[replace.size()]));
    }



    /** Return true if the columns COMMON1 from ROW1 and COMMON2 from
     *  ROW2 all have identical values.  Assumes that COMMON1 and
     *  COMMON2 have the same number of elements and the same names,
     *  that the columns in COMMON1 apply to this table, those in
     *  COMMON2 to another, and that ROW1 and ROW2 come, respectively,
     *  from those tables. */
    private static boolean equijoin(List<Column> common1, List<Column> common2,
                                    Row row1, Row row2) {
        return true;
    }

    /** Returns a new Table where the current table
     *  and the table sent is merged by the new
     *  column names sent in as a ArrayList<String>.
     *  @param  TABLE2
     *  @param  colNames */
    Table mergeTable(Table table2, ArrayList<String> colNames) {
        Table toReturn = new Table(colNames);
        Iterator<Row> t1 = this.iterator();
        Iterator<Row> t2 = table2.iterator();
        while (t1.hasNext()) {
            toReturn.add(t1.next());
        }
        while (t2.hasNext()) {
            toReturn.add(t2.next());
        }
        return toReturn;
    }


    /** Returns the title row of a table. */
    Row titleRow() {
        return _title;
    }
    /** Returns the HashSet<Row> of this class. */
    HashSet<Row> getHash() {
        return _rows;
    }


    /** This is stores rows. */
    private HashSet<Row> _rows = new HashSet<>();
    /** This stores title row. */
    private Row _title;
    /** This stores the boolean value
     *  as to whether or not a method
     *  inside can still run.
     *  Will automatically be true. */
    private Boolean canStillRun = true;
}

